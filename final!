clear screen;
CREATE OR REPLACE PROCEDURE POPULATE_CLIENTI(v_name IN VARCHAR2,v_prenume IN VARCHAR2,v_email IN VARCHAR2,v_parola IN VARCHAR2) AS
BEGIN
  insert into clienti (nume,prenume,email,parola) values (v_name,v_prenume,v_email,v_parola);
END POPULATE_CLIENTI;
/


CREATE OR REPLACE PROCEDURE pop_REZERVARI(v_numarCamera int,v_idHotel int,v_idClient int,v_checkin DATE,v_checkout DATE) AS
BEGIN
insert into rezervari values (v_numarCamera,v_idHotel,v_idClient,v_checkin,v_checkout);
END pop_REZERVARI;
/

CREATE OR REPLACE PROCEDURE findHotelsByCity(oras varchar,nume OUT VECTOR_VARCHAR,stele OUT VECTOR_INT,nota OUT VECTOR_INT,idHot OUT VECTOR_INT) IS
   CURSOR lista_hoteluri IS SELECT nume_hotel,stele,nota,id_hotel FROM hoteluri WHERE nume_oras=oras;
v_i int;
BEGIN
v_i:=1;
stele:=VECTOR_INT();
nume:=VECTOR_VARCHAR();
nota:=VECTOR_INT();
idHot:=VECTOR_INT();
idHot.extend(100);
stele.extend(100);
nume.extend(100);
nota.extend(100);
    OPEN lista_hoteluri;
    LOOP
        FETCH lista_hoteluri INTO nume(v_i),stele(v_i),nota(v_i),idHot(v_i);
        EXIT WHEN lista_hoteluri%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(nume(v_i)||' '|| stele(v_i)||' '||nota(v_i));
        v_i:=v_i+1;
    END LOOP;
    CLOSE lista_hoteluri; 
    END findHotelsByCity;
/


CREATE Or REPLACE TYPE VECTOR_VARCHAR AS VARRAY(100) OF VARCHAR2(20); 
/ 
CREATE Or REPLACE TYPE VECTOR_INT AS VARRAY(100) OF int;
/



CREATE OR REPLACE PROCEDURE findRooms(idHotel int,tip OUT VECTOR_VARCHAR,pret OUT VECTOR_INT) AS
 CURSOR lista_camere IS SELECT tip,pret FROM camere WHERE id_hotel=idHotel;
   --rooms VECTORI;
  -- v_tip camere.tip%type;       
   --v_pret camere.pret%type;
   v_i int;
BEGIN
v_i:=1;
pret:=VECTOR_INT();
tip:=VECTOR_VARCHAR();

pret.extend(100);
tip.extend(100);


    OPEN lista_camere;
    LOOP
        FETCH lista_camere INTO tip(v_i),pret(v_i);
        EXIT WHEN lista_camere%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(tip(v_i)||' '|| pret(v_i));
        v_i:=v_i+1;
    END LOOP;
    CLOSE lista_camere;
    END findRooms;
/



CREATE OR REPLACE FUNCTION pretMediuPeOras(numeOras varchar) RETURN float AS
CURSOR pret_camere IS select c.pret from camere c join hoteluri h on c.id_hotel=h.id_hotel where h.nume_oras=numeOras; 
   v_pret camere.pret%type;
    v_medie float;
    v_suma int;
    v_count int;
BEGIN
v_count:=0;
v_suma:=0;
    OPEN pret_camere;
    LOOP
        FETCH pret_camere INTO v_pret;
        EXIT WHEN pret_camere%NOTFOUND;
        v_count:=v_count+1;
        v_suma:=v_suma+v_pret;
        --DBMS_OUTPUT.PUT_LINE(v_suma);
    END LOOP;
    CLOSE pret_camere;
    v_medie:=v_suma/v_count;
    return v_medie;
END;
/



CREATE OR REPLACE FUNCTION pretMediuPeHotel(numeHotel varchar) RETURN float AS
CURSOR pretMediu_hotel IS select c.pret from camere c join hoteluri h on c.id_hotel=h.id_hotel where h.nume_hotel=numeHotel;
v_pret camere.pret%type;
    v_medie float;
    v_suma int;
    v_count int;
BEGIN
v_count:=0;
v_suma:=0;
    OPEN pretMediu_hotel;
    LOOP
        FETCH pretMediu_hotel INTO v_pret;
        EXIT WHEN pretMediu_hotel%NOTFOUND;
        v_count:=v_count+1;
        v_suma:=v_suma+v_pret;
        --DBMS_OUTPUT.PUT_LINE(v_suma);
    END LOOP;
    CLOSE pretMediu_hotel;
    v_medie:=v_suma/v_count;
    return v_medie;
END;
/



CREATE OR REPLACE PROCEDURE hoteluriCuPretIntre2Valori(pret1 int, pret2 int) AS
CURSOR hoteluri_intre2valori IS select nume_hotel,nume_oras,stele,nota from hoteluri h join camere c on c.id_hotel=h.id_hotel where c.pret>=pret1 and c.pret<=pret2;
v_nume hoteluri.nume_hotel%type;
    v_oras hoteluri.nume_oras%type;
    v_stea hoteluri.stele%type;
    v_note hoteluri.nota%type;
BEGIN
    OPEN hoteluri_intre2valori;
    LOOP
        FETCH hoteluri_intre2valori INTO v_nume,v_oras,v_stea,v_note;
        EXIT WHEN hoteluri_intre2valori%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(v_nume||' '||v_oras||' '||v_stea||' '||v_note);
    END LOOP;
    CLOSE hoteluri_intre2valori;
END;
/




CREATE OR REPLACE PROCEDURE anulareRezervare(idClient int) AS
v_in DATE;
BEGIN
select check_in into v_in from rezervari where id_client=idClient;
if(sysdate-v_in<=7) THEN
DBMS_OUTPUT.PUT_LINE('NU SE POATE ANULA REZERVAREA!');
ELSE
DBMS_OUTPUT.PUT_LINE('REZERVARE ANULATA!');
DELETE FROM REZERVARI WHERE ID_CLIENT=idClient;
END IF;
END;
/


--CREATE SEQUENCE SEQ;


CREATE OR REPLACE TRIGGER AUTONUMBER
    BEFORE INSERT ON CLIENTI
    FOR EACH ROW
    BEGIN
       SELECT SEQ.NEXTVAL
       INTO :NEW.id_client FROM DUAL;
    END;
    
  /
  
  
  CREATE OR REPLACE TRIGGER validareRezervare
  BEFORE INSERT ON REZERVARI
  FOR EACH ROW
  when (NEW.CHECK_IN>NEW.CHECK_OUT)
  declare    
   user_xcep EXCEPTION;
   PRAGMA EXCEPTION_INIT( user_xcep, -20001 );
begin
   raise user_xcep;
end;
  /
  
  
  CREATE OR REPLACE FUNCTION BILL(IDCLIENT int) RETURN INT AS
  CURSOR factura IS select c.pret from camere c join  rezervari r on r.ID_HOTEL=c.ID_HOTEL where id_client=idclient;
v_pret camere.pret%type;
    v_suma int;
BEGIN
v_suma:=0;
    OPEN factura;
    LOOP
        FETCH factura INTO v_pret;
        EXIT WHEN factura%NOTFOUND;
        v_suma:=v_suma+v_pret;
        --DBMS_OUTPUT.PUT_LINE(v_suma);
    END LOOP;
    CLOSE factura;
    return v_suma;
END;
/

CREATE OR REPLACE TRIGGER REDUCERI
BEFORE INSERT ON REZERVARI
FOR EACH ROW
DECLARE
CURSOR reducere_camere IS SELECT PRET FROM CAMERE;
V_PRET CAMERE.PRET%TYPE;
V_IN DATE;
V_O DATE;
v_red int;
BEGIN
v_in:='1-04-2019';
v_o:='1-06-2019';
IF(:NEW.CHECK_IN>V_IN AND :NEW.CHECK_IN<V_O) THEN
OPEN reducere_camere;
LOOP
FETCH reducere_camere INTO V_PRET;
EXIT WHEN reducere_camere%NOTFOUND;
v_red:=0.3*v_pret;
V_PRET:=V_PRET-V_RED;
END LOOP;
CLOSE reducere_camere;
END IF;
END;
/
--CREATE INDEX index_oras ON HOTELURI(nume_oras);
CREATE INDEX checkInOut ON REZERVARI(CHECK_IN,CHECK_OUT);
